grammar com.galenframework.Spec with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate spec "http://www.galenframework.com/Spec"

Model:
	{Model}
	objects=Objects?
	importSection+=Import*
	layoutCheckSection+=Section*;

Objects:
	'@objects'
	BEGIN
	(elements+=Element)+
	END;

Import:
	'@import' name=GSPEC_FILE;

Section :{Section}
	'=' => '='
	BEGIN
	rules+=LayoutRule*
	taggedSection=TaggedSection?
	END;

TaggedSection:
	'@on' tag=STRING
	sections+=Section+;

LayoutRule:
	ref=[Element] ':'
	BEGIN
	(references+=SpecsReference)+
	(sections+=Section)*
	END;

SpecsReference:
	{SpecsReference}
	SimpleSpecsReference | ComplexSpecsReference;

SimpleSpecsReference:
	'Visible' | 'Absent';

ComplexSpecsReference:
	{ComplexSpecsReference} ((('near' | 'below' | 'above') INT 'to' INT 'px') |
	('aligned horizontally' ('all' | 'top' | 'bottom' | 'centered') (ref=[Element])? (INT 'px')?) |
	('aligned vertically' ('all' | 'left' | 'bottom' | 'right') (ref=[Element])? (INT 'px')?) |
	('height' ('<' | '>') (INT 'px' | 'screen/height')) |
	('width' ('<' | '>') (INT 'px' | 'screen/width@')));

Element returns Element:
	{Element}
	name=ID selector=Selector
	(BEGIN
	(children+=Element)+
	END)?;

Selector: //; returns ecore::EString:
//('.' | '//' | '#')? (ID | '[' | ']' | '@' | '*' | '=' | '\'' | '"')?;
	IdSelector | CssSelector | XpathSelector;

IdSelector:
	'id' value=IdSelectorValue;

IdSelectorValue returns ecore::EString:
	ID | INT
;

CssSelector:
	('css')? value=CssSelectorValue;

CssSelectorValue returns ecore::EString:
	 CssExpression*
;

CssExpression returns ecore::EString:
	( '#' | '.')? (ID | INT) (' ')?
;

XpathSelector:
	'xpath' value=XpathSelectorValue;

XpathSelectorValue returns ecore::EString:
	'//'('*')?(ID?)  ( '['|']'| '@'  | '=' | '/'| '\'' | '"'  )*
;

SelectorValue:
	(ID|INT)+
;

terminal ID returns ecore::EString: ('a'..'z' | 'A'..'Z' | '_' | '-') ('a'..'z' | 'A'..'Z' | '_' | '-' | '*' | INT)*;
	
terminal GSPEC_FILE:
	ID '.gspec';

	// Single line comment
terminal SL_COMMENT:
	'#' WS !('\n' | '\r')* ('\r'? '\n')?;

	// The following synthetic tokens are used for the indentation-aware blocks
terminal BEGIN:
	'synthetic:BEGIN'; // increase indentation
terminal END:
	'synthetic:END'; // decrease indentation
