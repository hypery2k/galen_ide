/*
 * generated by Xtext 2.9.2
 */
package com.galenframework.tests.components

import com.galenframework.tests.SpecsInjectorProvider
import com.galenframework.specs.Model
import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import com.galenframework.specs.LayoutRule
import com.galenframework.specs.TaggedRule
import com.galenframework.specs.VisibilityRule
import com.galenframework.specs.AlignmentRule

@RunWith(XtextRunner)
@InjectWith(SpecsInjectorProvider)
class LayoutTest {

	@Inject
	ParseHelper<Model> parseHelper;

	@Test
	def void shouldParseLayoutRuleTitleSimple() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
						
			= Main =
				bootstrap-logo:
			    	visible
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals("= Main =", layoutSection.name)
		Assert.assertEquals(1, layoutSection.generalRules.size)

		Assert.assertTrue(layoutSection.generalRules.get(0) instanceof LayoutRule)
		val layoutRule = layoutSection.generalRules.get(0) as LayoutRule
		Assert.assertEquals(1, layoutRule.references.size)
		val layoutRuleSpec = layoutRule.references.get(0)
		Assert.assertTrue(layoutRuleSpec.rule instanceof VisibilityRule)
	}

	@Test
	def void shouldParseLayoutRuleTitleSimpleWhitespace() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
				
			= Main section =
				bootstrap-logo:
				    absent
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals("= Main section =", layoutSection.name)
		Assert.assertEquals(1, layoutSection.generalRules.size)
		Assert.assertTrue(layoutSection.generalRules.get(0) instanceof LayoutRule)
		val layoutRule = layoutSection.generalRules.get(0) as LayoutRule
		Assert.assertTrue(layoutRule.references.get(0).rule  instanceof VisibilityRule)
		val simpleSpec = layoutRule.references.get(0).rule  as VisibilityRule
		Assert.assertEquals("absent", simpleSpec.name)
	}

	@Test
	def void shouldParseMultipleLayoutRules() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
				bootstrap-logo2 #id2
				
			= Main section =
				bootstrap-logo:
				    visible
				    aligned horizontally top header
				bootstrap-logo2:
				    aligned horizontally top header
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals("= Main section =", layoutSection.name)
		Assert.assertEquals(2, layoutSection.generalRules.size)
		val layoutRuleLogo1 = layoutSection.generalRules.get(0) as LayoutRule
		val layoutRuleLogo2 = layoutSection.generalRules.get(1) as LayoutRule

		Assert.assertEquals(2, layoutRuleLogo1.references.size)
		Assert.assertEquals(1, layoutRuleLogo2.references.size)
		val layoutRuleLogo1Visible = layoutRuleLogo1.references.get(0)
		Assert.assertTrue(layoutRuleLogo1Visible .rule instanceof VisibilityRule)
		Assert.assertEquals("visible", (layoutRuleLogo1Visible.rule  as VisibilityRule).name)
		val layoutRuleLogo1Align = layoutRuleLogo1.references.get(1)
		Assert.assertTrue(layoutRuleLogo1Align.rule  instanceof AlignmentRule)
		val layoutRuleLogo2Align = layoutRuleLogo2.references.get(0)
		Assert.assertTrue(layoutRuleLogo2Align.rule  instanceof AlignmentRule)
	}

	@Test
	def void shouldParseGroups() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
				
			@groups
			  	navigation bootstrap-logo  
			= Main section =
				&navigation:
				    visible
				    aligned horizontally top header
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals("= Main section =", layoutSection.name)
		Assert.assertEquals(1, layoutSection.generalRules.size)
		val layoutRule = layoutSection.generalRules.get(0) as LayoutRule

		Assert.assertEquals(2, layoutRule.references.size)
		val layoutRuleSpec1 = layoutRule.references.get(0)
		val layoutRuleSpec2 = layoutRule.references.get(1)
		Assert.assertTrue(layoutRuleSpec1.rule instanceof VisibilityRule)
		Assert.assertTrue(layoutRuleSpec2.rule  instanceof AlignmentRule)
		val simpleSpec = layoutRuleSpec1.rule  as VisibilityRule
		Assert.assertEquals("visible", simpleSpec.name)
	}

	@Test
	def void shouldParseMultipleRuleSpecs() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
				
			= Main section =
				bootstrap-logo:
				    visible
				    aligned horizontally top header
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals("= Main section =", layoutSection.name)
		Assert.assertEquals(1, layoutSection.generalRules.size)
		val layoutRule = layoutSection.generalRules.get(0) as LayoutRule

		Assert.assertEquals(2, layoutRule.references.size)
		val layoutRuleSpec1 = layoutRule.references.get(0)
		val layoutRuleSpec2 = layoutRule.references.get(1)
		Assert.assertTrue(layoutRuleSpec1.rule instanceof VisibilityRule)
		Assert.assertTrue(layoutRuleSpec2.rule  instanceof AlignmentRule)
		val simpleSpec = layoutRuleSpec1.rule  as VisibilityRule
		Assert.assertEquals("visible", simpleSpec.name)
	}
	
	

	@Test
	def void shouldParseMultipleRuleSpecsAndMultipleRules() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
				bootstrap-logo2 #id2
				
			= Main section =
				bootstrap-logo:
				    visible
				    aligned horizontally top header
				bootstrap-logo2:
				    absent
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals("= Main section =", layoutSection.name)
		Assert.assertEquals(2, layoutSection.generalRules.size)
		val layoutRule = layoutSection.generalRules.get(0) as LayoutRule

		Assert.assertEquals(2, layoutRule.references.size)
		val layoutRuleSpec1 = layoutRule.references.get(0)
		val layoutRuleSpec2 = layoutRule.references.get(1)
		Assert.assertTrue(layoutRuleSpec1.rule instanceof VisibilityRule)
		Assert.assertTrue(layoutRuleSpec2.rule  instanceof AlignmentRule)
		val simpleSpec = layoutRuleSpec1.rule  as VisibilityRule
		Assert.assertEquals("visible", simpleSpec.name)
	}

	@Test
	def void shouldParseTaggedSection() {
		val result = parseHelper.parse('''
			@objects
				bootstrap-logo #id
				
			= Main section = 
			    @on mobile
			    	bootstrap-logo:
			    		absent
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertEquals(1, layoutSection.taggedRules.size)

		Assert.assertNotNull(layoutSection.taggedRules.get(0))
		val taggedRule = layoutSection.taggedRules.get(0) as TaggedRule
		Assert.assertEquals("Tags", "@on mobile", taggedRule.name)
	}

	@Test
	def void shouldParseWithTaggedSection() {
		val result = parseHelper.parse('''
				@objects
				bootstrap-logo #id
				
			= Main section =
				bootstrap-logo:
				    visible
			
			    @on mobile
			    	bootstrap-logo:
			    		absent
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1, layoutSections.size)
		val layoutSection = layoutSections.get(0)
		Assert.assertNotNull(layoutSection.generalRules)
		Assert.assertNotNull(layoutSection.generalRules.get(0))
		Assert.assertEquals("= Main section =", layoutSection.name)
	/*
	 * Assert.assertEquals(2,layoutSection.taggedSections.size)
	 * 
	 * Assert.assertTrue(layoutSection.rules.get(0) instanceof LayoutRule)	
	 * Assert.assertTrue(layoutSection.rules.get(1) instanceof TaggedSection)	
	 * val layoutRule = layoutSection.rules.get(0) as LayoutRule
	 * val taggedSection = layoutSection.rules.get(1) as TaggedSection
	 * 
	 * Assert.assertTrue(layoutRule.references.get(0) instanceof SimpleSpecsReference)	
	 * val simpleSpec = layoutRule.references.get(0) as SimpleSpecsReference
	 * Assert.assertEquals("visible",simpleSpec.value)	
	 * 
	 * 
	 * Assert.assertNotNull(taggedSection)
	 Assert.assertEquals("Tags","@on mobile",taggedSection.name) */
	}

}
