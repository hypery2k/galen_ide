/*
 * generated by Xtext 2.9.2
 */
package com.galenframework.tests.integrated

import com.galenframework.specs.Model
import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import com.galenframework.tests.SpecsInjectorProvider
import com.galenframework.specs.VisibilityRule
import com.galenframework.specs.LayoutRule
import com.galenframework.specs.Element
import com.galenframework.specs.ElementEntryReference
import com.galenframework.specs.GroupEntryReference

@RunWith(XtextRunner)
@InjectWith(SpecsInjectorProvider)
class SpecsParsingTest{

	@Inject
	ParseHelper<Model> parseHelper;


	@Test
	def void shouldParseSpecWithImport() {
		val result = parseHelper.parse('''
			# objects
			@objects
			  navbar  .navbar-header
			  
			@import abc.gspec
			@import other.gspec
			  
			= Main section =
			  navbar:
			    visible
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.objects.elements)
		Assert.assertNotNull(result.imports)
		val elements = result.objects.elements	
		val imports = result.imports	
		val layoutSections = result.layoutChecks	
		Assert.assertEquals(1,elements.size)
		Assert.assertEquals(2,imports.size)
		Assert.assertEquals("abc.gspec",imports.get(0).fileName)
		Assert.assertEquals("other.gspec",imports.get(1).fileName)
		Assert.assertEquals(1,layoutSections.size)
		val mainSection = layoutSections.get(0)
		Assert.assertEquals(1,mainSection.generalRules.size)
		val layoutRule = mainSection.generalRules.get(0) as LayoutRule
		val applyToRef = layoutRule.applyTo as ElementEntryReference
		val elementRef = applyToRef.elementEntryReference
		Assert.assertEquals("navbar",elementRef.name)
	}
	
	@Test
	def void shouldParseSpecWithImportAndGroups() {
		val result = parseHelper.parse('''
			# objects
			@objects
			  navbar  .navbar-header
			@groups
			  navigation navbar  
			@import abc.gspec
			@import other.gspec
			  
			= Main section =
			  &navigation:
			    visible
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.objects.elements)
		Assert.assertNotNull(result.imports)
		val elements = result.objects.elements	
		val imports = result.imports	
		val layoutSections = result.layoutChecks	
		Assert.assertEquals(1,elements.size)
		Assert.assertEquals(2,imports.size)
		Assert.assertEquals("abc.gspec",imports.get(0).fileName)
		Assert.assertEquals("other.gspec",imports.get(1).fileName)
		Assert.assertEquals(1,layoutSections.size)
		val mainSection = layoutSections.get(0)
		Assert.assertEquals(1,mainSection.generalRules.size)
		val layoutRule = mainSection.generalRules.get(0) as LayoutRule
		val applyToRef = layoutRule.applyTo as GroupEntryReference
		val grouptRef = applyToRef.groupEntryReference
		Assert.assertEquals("navigation",grouptRef.name)
	}
	

	@Test
	def void loadPassSimpleSpec() {
		val result = parseHelper.parse('''
			# objects
			@objects
			  navbar  .navbar-header
			  
			= Main section =
			  navbar:
			    visible
		''')
		Assert.assertNotNull(result)
		Assert.assertNotNull(result.objects.elements)		
		val element = result.objects.elements.get(0)
		Assert.assertEquals("navbar",element.name)
		Assert.assertNotNull(result.layoutChecks)
		val layoutSections = result.layoutChecks
		Assert.assertEquals(1,layoutSections.size)
		val mainSection = layoutSections.get(0)
		Assert.assertEquals(1,mainSection.generalRules.size)
		val layoutRule = mainSection.generalRules.get(0) as LayoutRule
		val applyToRef = layoutRule.applyTo as ElementEntryReference
		val elementRef = applyToRef.elementEntryReference
		Assert.assertEquals("navbar",elementRef.name)
		/*
		val objects = result.objects.elements
		val sections = result.layoutCheckSection
		Assert.assertTrue("Should read one object definition, but was " + objects.size, objects.size == 1)
		Assert.assertTrue("Should read one object layout check section, but was " + sections.size, sections.size == 1)
		val object = objects.get(0)
		Assert.assertTrue("Should read CSS selector type, but was " + object.selector,
			object.selector.equalsIgnoreCase(".navbar-header"))
		val section = sections.get(0)
		Assert.assertTrue("Should get correct name, but was " + section.name,
			section.name.equalsIgnoreCase("Main section"))
		Assert.assertTrue("Should get correct element reference, but was " + section.ref.name,
			section.ref.name.equalsIgnoreCase("navbar")) */

	}

}
