/*
 * generated by Xtext 2.10.0
 */
package com.galenframework.formatting2

import com.galenframework.services.SpecsGrammarAccess
import com.galenframework.specs.Element
import com.galenframework.specs.Import
import com.galenframework.specs.LayoutCheck
import com.galenframework.specs.Model
import com.galenframework.specs.Objects
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class SpecsFormatter extends AbstractFormatter2 {
	
	@Inject extension SpecsGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		model.getObjects.format;
		for (Import importSection : model.getImportSection()) {
			importSection.format;
		}
		for (LayoutCheck layoutChecks : model.getLayoutChecks()) {
			layoutChecks.format;
		}
	}

	def dispatch void format(Objects objects, extension IFormattableDocument document) {
		objects.prepend[setNewLines(0)]
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Element elements : objects.getElements()) {
			elements.format(1, document);
		//	document.
		}
	}

	def dispatch void format(Element element,Integer indentationLevel, extension IFormattableDocument document) {
		element.prepend[setNewLines(1)]
		while(element.children !=null){
			for(var i=1;i<indentationLevel;i++){
				element.prepend[space = ' ']
			}
			element.format(indentationLevel+1,document)			
		}
	}

	def dispatch void format(Import imports, extension IFormattableDocument document) {
		imports.prepend[setNewLines(2)]
		//imports.format;
	}

	def dispatch void format(LayoutCheck layoutChecks, extension IFormattableDocument document) {
		layoutChecks.prepend[setNewLines(2)]
		//layoutChecks.format;
	}
	
	// TODO: implement for LayoutCheck, LayoutRule, TaggedRule, SpecsReference, Element
}
